import java.text.SimpleDateFormat

def versionMajor = 0
def versionMinor = 1
def versionPatch = 0

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'


def gitSha() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

def buildTime() {
    def df = new SimpleDateFormat("HH:mm yyyy-MM-dd")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "com.smartstudio.fbclm"
        minSdkVersion 15
        targetSdkVersion 22
        versionCode versionMajor * 1000000 + versionMinor * 10000 + versionPatch * 100
        versionName versionMajor + "." + versionMinor + "." + versionPatch

        manifestPlaceholders = [
                fabricApiKey: fabric_api_key
        ]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
            storeFile file(release_store_file)
            storePassword release_store_key
            keyAlias release_alias
            keyPassword release_key
        }

        debug {
            storeFile file('keystores/fbclm-debug.keystore')
            storePassword 'fbclmdebug'
            keyAlias 'Fbclm debug'
            keyPassword 'fbclmdebug'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix '.debug'
            versionNameSuffix ' ' + gitSha() + ' ' + buildTime()
            minifyEnabled false
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.0.0'
    compile 'com.android.support:support-annotations:20.0.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.picasso:picasso:2.5.0'
    compile 'com.squareup.okhttp:okhttp:2.2.0'
    compile 'com.jakewharton:butterknife:6.1.0'
    compile 'com.google.dagger:dagger:2.0-SNAPSHOT'
    apt 'com.google.dagger:dagger-compiler:2.0-SNAPSHOT'
    provided 'org.glassfish:javax.annotation:10.0-b28'
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'io.reactivex:rxjava:1.0.8'
    compile 'io.reactivex:rxandroid:0.24.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.2.3@aar') {
        transitive = true;
    }
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.0.5-beta'
}

preBuild.doFirst {
    Properties gradleProperties = new Properties()
    gradleProperties.load(new FileInputStream(rootProject.file("gradle.properties")))

    def fabricApiSecret = gradleProperties.getProperty("fabric_api_secret")
    Properties fabricProperties = new Properties()
    File fabricPropertiesFile = new File(project.projectDir, "fabric.properties")
    fabricPropertiesFile.createNewFile()
    fabricProperties.load(new FileInputStream(fabricPropertiesFile))
    fabricProperties.setProperty("apiSecret", fabricApiSecret)
    fabricProperties.store(new FileOutputStream(fabricPropertiesFile), null)
}